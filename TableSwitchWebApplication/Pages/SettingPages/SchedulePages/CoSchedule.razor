@page "/setting/co-schedule"
@using TableSwitchWebApplication.Data.Setting;
@using TableSwitchWebApplication.Models.Settings.Schedule;
@inherits CoScheduleBase;
@inject DialogService DialogService

<TitlePageComponent Title="CO SCHEDULE"></TitlePageComponent>

<Animate Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(1)">
    <div class="d-grid gap-2 d-md-flex justify-content-md-start col-md-6 col-sm-6">
        @if (PMShecduleModels is not null)
        {
            <div>
            <label>PM:</label>
            <br />
            <div>
                <RadzenDropDown TValue="UserShecduleModel" Data=@PMShecduleModels
                            Change=@(args => OnChangePM(args))
                            AllowFiltering=true
                            Placeholder="Text.." />
            </div>
            </div>
        }
        @if (BMShecduleModels is not null)
                {
        <div>
            <label>BM:</label>
            <br />
            <div>
                <RadzenDropDown TValue="UserShecduleModel" Data=@BMShecduleModels
                            Change=@(args => OnChangeBM(args))
                            AllowFiltering=true
                            Placeholder="Text.." />
            </div>
            </div>
        }
        @if (AMShecduleModels is not null)
        {
        <div>
            <label>AM:</label>
            <br />
            <div>
                <RadzenDropDown TValue="UserShecduleModel" Data=@AMShecduleModels
                            Change=@(args => OnChangeAM(args))
                            AllowFiltering=true
                            Placeholder="Text.." />
        </div>
        </div>
        }
        @if (CoShecduleModels is not null)
        {
        <div>
            <label>CO:</label>
            <br />
            <div>
                <RadzenDropDown TValue="UserShecduleModel" Data=@CoShecduleModels
                            Change=@(args => OnChangeCO(args))
                            AllowFiltering=true
                            Placeholder="Text.." />
        </div>
        </div>
        }
        <div>
            <div></div>
            <br />
            <RadzenButton Variant="Variant.Outlined" Text="Search" Icon="autorenew" ButtonStyle="ButtonStyle.Primary"
                          Click=@(args =>ShowBusyDialog(true)) />
        </div>
    </div>
</Animate>

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 698px;" TItem="Appointment" Data=@Appointments StartProperty="PlanDateStart" EndProperty="PlanDateEnd"
                 TextProperty="Title" SelectedIndex="2"
                 class="mt-4"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>
<style>
   .animation{
       @* animation-name: direction;
        animation-duration: 0.5s;
        animation-fill-mode: both;*@
   }

    @@keyframes direction {
        from {
            top: 0px;
        }

        to {
            top: 50px;
        }
    }
</style>
@code {
    RadzenScheduler<Appointment>? scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Console.WriteLine($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
                new Dictionary<string, object> { { "PlanDateStart", args.Start }, { "PlanDateEnd", args.End } });

            if (data != null)
            {
                Appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler!.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        Console.WriteLine($"AppointmentSelect: Appointment={args.Data.Title}");

        await DialogService.OpenAsync<EditAppointmentPage>("Public Holiday", new Dictionary<string, object> { { "Appointment", args.Data }},
        new DialogOptions()
            {
                CssClass = "animation"
            });
        await scheduler!.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
        foreach (var app in Appointments!)
        {
            if (args.Data.Title == app.Title) //part public holiday
            {
                args.Attributes["style"] = "background: red";
            }
            else
            {
                //Make other schedule has background color here....
            }
        }
        
    }
    protected override async Task OnInitializedAsync()
    {
        PMShecduleModels= await _logic!.GetPMByRoleAsync();
    }
    async Task ShowBusyDialog(bool withMessageAsString)
    {
        #pragma warning disable CS4014
        InvokeAsync(async () =>
        {
            // Simulate background task
            await Task.Run(() => OnSearchAsync());

            // Close the dialog
            DialogService.Close();
            await scheduler!.Reload();

        });

        await BusyDialog("Loading, Please Wait...");

    }
    // Busy dialog from string
    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            RenderFragment content = b =>
            {
                b.OpenElement(0, "RadzenRow");

                b.OpenElement(1, "RadzenColumn");
                b.AddAttribute(2, "Size", "12");
                b.AddContent(3, message);

                b.CloseElement();
                b.CloseElement();
            };
            return content;
        }, new DialogOptions()
            {
                ShowTitle = false,
                Style = "min-height:auto;min-width:auto;width:auto",
                CloseDialogOnEsc = false,

            });
    }

}
